# I have tried to identify "0" or missing values from mass, concentration and equivalents using IF, but not been able to do so.
# Some of the json output names do not make sense
import json
type_one = ("This is a portion method")
type_two = ("This is a continuous method")
print ("Exp 1")
constituent_name = ("4-Methylmorpholine N-oxide"), ("potassium osmate dihydrate"), ("(5R,7aS)‐5‐butyl‐1H,3H,5H,7aH‐pyrrolo[1,2‐c][1,3]oxazol‐3‐one")
constituent_mass = (1.76), (97.30), (347.00)
constituent_conc = (8.42), (0.38), (1.91)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 2")
constituent_name = ("H2PtCl6"), ("benzyl alcohol"), ("KH"), ("ammonia")
constituent_mass = (4.28), (0), (0), (0)
constituent_conc = (0.01), (0.50), (0.50), (0)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print ("values given as '0' indicate that this data is missing")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 3")
constituent_name = "(1S,2S)-1,2-Bis(2-hydroxyphenyl)-1,2-diaminoethane", "2-methylbenzaldehyde", "benzylamine", "benzophenone imine"
constituent_mass = (1.00), (1.23), (0), (0)
constituent_conc = (4.10), (10.20), (0), (0)
constituent_eqs = (1.0), (2.5), (1), (1)
print (type_two)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print (str(constituent_eqs) + ", equivalents shown respectively")
print ("values given as '0' indicate that this data is missing")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (json.dumps(constituent_eqs))
print (" ")

print ("Exp 4")
constituent_name = "Gd(OTf)3•9H2O ", "YbL•4H2O"
constituent_mass = (500.00), (200.00)
constituent_conc = (0.65), (0.22)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 5")
constituent_name = "methyl 3,3-dimethylpent-4-enoate ", "lithium aluminum hydride"
constituent_mass = (2.142), (38.00)
constituent_conc = (1.00), (1.00)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 6")
constituent_name = "rac-17a1", "TBAF",
constituent_mass = (330.00), (0.70)
constituent_conc = (0.64), (0.70)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 7")
constituent_name = "(ƞ4–cycloocta–1,5–diene)(1,3-dimesitylimidazol-2-ylidene) iridium(I)", "silver hexafluorophosphate", "triphenylphosphine"
constituent_mass = (0.70), (0.276), (0.287)
constituent_conc = (1.093), (1.093), (1.093)
print (type_two)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 8")
constituent_name = "1,3-bis(2,6-di-iso-propylphenyl)-4,5-dimethylimidzolium chloride", "potassium tert-butoxide", "[Ir(COD)Cl]2"
constituent_mass = (0.340), (0.101), (0)
constituent_conc = (0.75), (0.90), (0)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print ("values given as '0' indicate that this data is missing")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (" ")

print ("Exp 9")
constituent_name = "4b", "iridium I",
constituent_mass = (189.00), (0)
constituent_conc = (0.50), (0.00325)
constituent_eqs = (1.0), (0)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print (str(constituent_eqs) + ", equivalents shown respectively")
print ("values given as '0' indicate that this data is missing")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (json.dumps(constituent_eqs))
print (" ")

print ("Exp 10")
constituent_name = "NaH", "ethylene glycol", "tributyl(iodomethyl)stannane"
constituent_mass = (2.12), (7.40), (19.00)
constituent_conc = (52.90), (132.00), (44.10)
constituent_eqs = (1.2), (3.0), (1.0)
print (type_one)
print ("names",(constituent_name))
print (str(constituent_mass) + ", mass shown respectively")
print (str(constituent_conc) + ", concentration shown respectively")
print (str(constituent_eqs) + ", equivalents shown respectively")
print("json outputs")
print (json.dumps(constituent_name))
print (json.dumps(constituent_mass))
print (json.dumps(constituent_conc))
print (json.dumps(constituent_eqs))